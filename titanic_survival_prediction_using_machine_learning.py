# -*- coding: utf-8 -*-
"""Titanic-Survival-Prediction-using-Machine-Learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/101Yx_iqwP8SF5aj3rqNFvK47Ge2lcI-3

# Importing the Dependencies :
--> we are importing some libraries and functions which we need for our program.
"""

# some libraries

import numpy as np  # It is used to make an array using numpy library and np as an alias name for that library.
import pandas as pd  # It is used to create the dataframes and these are the structured table, if we load our dataset into dataframes then it is easier to analyze or process the data.
import matplotlib.pyplot as plt
import seaborn as sns      # matplotlib and seaborn library are used for data visualization and they are very useful to make the plots and graphs.

# some functions that we have to import

'''  train_test_split function is used to split our data into training & testing data and
  sklearn is a machine learning library and this library contains several data preprocessing functions,
  also several machine learning alogorithms. '''

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression  # LogisticRegression is work on binary classification.
from sklearn.metrics import accuracy_score  # accuracy_score is used for evaluating our model to find how many predictions are predicting accurately or not.

"""# Data Collection and Data Pre-Processing

"""

# load the data from csv file to pandas DataFrame

titanic_data = pd.read_csv('/content/Titanic-Dataset.csv')

# printing the first five rows of the above dataframe.

titanic_data.head()

# check the number of rows and columns in our dataset.

titanic_data.shape

# getting some information about the data

titanic_data.info()

# check the number of missing values in each column

titanic_data.isnull().sum()

"""# Handling the Missing Values:"""

# drop the "Cabin Column" from the dataframe

titanic_data = titanic_data.drop(columns = 'Cabin', axis = 1) # axis = 1 represnts the whole column and 0 represents the row and drop is used to remove the data from the dataset.

''' We will be taking the age column and we will be finding the mean value for all the values in the age column and
that mean value will be replaced in all the missing values so we will just take the missing values and replace with mean. '''

# replacing the missing values in age column with mean value

titanic_data['Age'].fillna(titanic_data['Age'].mean(), inplace = True) # fillna is used for fill the missing values and na means not available.

# we will find the mode value for the 'Embared column' that means the value which is repeated most number of times.

# finding the mode value of 'Embared Column'

print(titanic_data['Embarked'].mode())

print(titanic_data['Embarked'].mode()[0])

# replacing the missing values in 'Embarked Column'
titanic_data['Embarked'].fillna(titanic_data['Embarked'].mode()[0], inplace = True)

# check the number of missing values in each column

titanic_data.isnull().sum()

"""# Data Analysis"""

# getting some statistical measures about the data

titanic_data.describe() # describe function give some statistical data like mean, standard deviation etc

# finding the number of people survived and not survived

titanic_data['Survived'].value_counts()

"""--> **In the above output 0 represents the peoples who isn't survived and 1 represents the survived peoples.**

# Data Visualization
"""

sns.set() # it is used to give some themes for our plot.

# making a count plot for 'Survived Column'

sns.countplot(x = 'Survived', data = titanic_data, palette = 'flare', hue_order = [0, 1])

titanic_data['Sex'].value_counts()

# making a count plot for 'Sex Column'

sns.countplot(x = 'Sex', data = titanic_data, palette = 'flare')

# comparing the number of survivors according the gender wise.

sns.countplot(x='Sex', hue='Survived', data=titanic_data)

# making a count plot for 'Pclass Column'

sns.countplot(x = 'Pclass', data = titanic_data, palette = 'flare')

sns.countplot(x='Pclass', hue='Survived', data=titanic_data)

# making a count plot for 'Embarked Column'

sns.countplot(x = 'Embarked', data = titanic_data, palette = 'flare')

sns.countplot(x='Embarked', hue='Survived', data=titanic_data)

"""# Encoding the Categorical Columns

"""

titanic_data['Sex'].value_counts()

titanic_data['Embarked'].value_counts()

# converting categorical columns
titanic_data.replace({'Sex': {'male': 0, 'female': 1},'Embarked': {'S': 0, 'C': 1, 'Q': 2}}, inplace = True)

titanic_data.head()

"""# Separating features & Target"""

X = titanic_data.drop(columns = ['PassengerId', 'Name', 'Ticket', 'Survived'], axis = 1)
Y = titanic_data['Survived']

print(X)

print(Y)

"""# Splitting the data into Training Data and Testing Data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, random_state = 2)

print(X.shape, X_train.shape, X_test.shape)

"""# Logistic Regression"""

model = LogisticRegression()

# training the logistic regression model with training data
model.fit(X_train, Y_train)

"""# Model Evaluation

--> Accuracy score
"""

# accuracy on training data
X_train_prediction = model.predict(X_train)

print(X_train_prediction)

training_data_accuracy = accuracy_score(Y_train, X_train_prediction)
print('Accuracy score of Training Data: ', training_data_accuracy)

# accuracy on testing data
X_test_prediction = model.predict(X_test)

print(X_test_prediction)

test_data_accuracy = accuracy_score(Y_test, X_test_prediction)
print('Accuracy score of Testing Data: ', test_data_accuracy)

